"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var CalculationResult_1 = require("../CalculationResult");
var nativescript_secure_storage_1 = require("nativescript-secure-storage");
var portfolio_item_service_1 = require("./portfolio-item.service");
var currency_price_service_1 = require("./currency-price.service");
var CalculationService = (function () {
    function CalculationService(portfolioItemService, currencyPriceService) {
        this.portfolioItemService = portfolioItemService;
        this.currencyPriceService = currencyPriceService;
        this.calculationResults = [];
        this.secureStorage = new nativescript_secure_storage_1.SecureStorage();
    }
    CalculationService.prototype.addCalculationResult = function (calculationResult) {
        this.calculationResults.push(calculationResult);
    };
    CalculationService.prototype.createCalculationResult = function (sourcePortfolioItemName, targetCurrencySymbol, description, platform) {
        var portfolioItem = this.portfolioItemService.getPortfolioItemByTechnicalName(sourcePortfolioItemName, platform);
        var currencyPrice = this.currencyPriceService.getCurrencyPrice(portfolioItem.getSymbol(), targetCurrencySymbol, platform);
        var newCalculationResult = new CalculationResult_1.CalculationResult(description, portfolioItem, currencyPrice, platform, targetCurrencySymbol);
        this.calculationResults.push(newCalculationResult);
        return newCalculationResult;
    };
    CalculationService.prototype.deleteCalculationResult = function (calculationResult) {
        for (var i = 0; i < this.calculationResults.length; i++) {
            var calcResult = this.calculationResults[i];
            if (calcResult.getPlatform() === calculationResult.getPlatform() &&
                calcResult.getDescription() === calculationResult.getDescription() &&
                calcResult.getTargetCurrency() === calculationResult.getTargetCurrency() &&
                calcResult.getSourcePortfolioItem() === calculationResult.getSourcePortfolioItem()) {
                this.calculationResults.splice(i, 1);
            }
        }
    };
    CalculationService.prototype.calculateAllResults = function () {
        for (var i = 0; i < this.calculationResults.length; i++) {
            this.calculateResult(this.calculationResults[i]);
        }
    };
    CalculationService.prototype.calculateResult = function (calculationResult) {
        calculationResult.getResult();
    };
    CalculationService.prototype.getAllCalculationResults = function () {
        return this.calculationResults;
    };
    //TODO: save and load have to be renewed
    CalculationService.prototype.saveCalculationResults = function () {
        this.secureStorage.setSync({
            key: "cryptoCoinCalcCalculationResultData",
            value: JSON.stringify(this.calculationResults)
        });
    };
    CalculationService.prototype.loadCurrencyPrices = function () {
        var storedCalculationResultString = this.secureStorage.getSync({
            key: "cryptoCoinCalcCalculationResultData",
        });
        if (storedCalculationResultString) {
            var storedCalculationResults = JSON.parse(storedCalculationResultString);
            for (var i = 0; i < storedCalculationResults.length; i++) {
                var storedCalculationResult = storedCalculationResults[i];
                this.createCalculationResult(storedCalculationResult.sourcePortfolioItem.portfolioItemName, storedCalculationResult.targetCurrency, storedCalculationResult.description, storedCalculationResult.platform);
            }
        }
    };
    CalculationService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [portfolio_item_service_1.PortfolioItemService,
            currency_price_service_1.CurrencyPriceService])
    ], CalculationService);
    return CalculationService;
}());
exports.CalculationService = CalculationService;
//# sourceMappingURL=data:application/json;base64,