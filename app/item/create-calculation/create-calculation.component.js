"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var calculation_service_1 = require("../services/calculation.service");
var router_1 = require("@angular/router");
var router_2 = require("nativescript-angular/router");
var nativescript_drop_down_1 = require("nativescript-drop-down");
var portfolio_item_service_1 = require("../services/portfolio-item.service");
var currency_price_service_1 = require("../services/currency-price.service");
var CreateCalculationComponent = (function () {
    function CreateCalculationComponent(calculationService, router, routerExtension, portfolioItemService, currencyPriceService) {
        this.calculationService = calculationService;
        this.router = router;
        this.routerExtension = routerExtension;
        this.portfolioItemService = portfolioItemService;
        this.currencyPriceService = currencyPriceService;
        this.platformList = new nativescript_drop_down_1.ValueList([
            { value: "bitstamp", display: "Bitstamp" },
            { value: "bitfinex", display: "Bitfinex" }
        ]);
        this.hint = null;
        this.selectedIndexPlatformList = this.platformList.getIndex("bitstamp");
        this.platform = this.platformList.getValue(this.selectedIndexPlatformList);
    }
    CreateCalculationComponent.prototype.ngOnInit = function () {
        //initialize source portfolio names with default platform "bitstamp"
        this.fillPortfolioItemsList("bitstamp");
        this.fillSymbolsList("bitstamp");
    };
    CreateCalculationComponent.prototype.createCalculationResult = function () {
        if (!this.platform ||
            !this.description ||
            !this.targetCurrencySymbol ||
            !this.sourcePortfolioItemName) {
            alert("Bitte alle Felder ausf√ºllen");
        }
        else {
            this.calculationService.createCalculationResult(this.sourcePortfolioItemName.toLowerCase(), this.targetCurrencySymbol.toLowerCase(), this.description, this.platform.toLowerCase());
            this.calculationService.saveCalculationResults();
            this.routerExtension.back();
        }
    };
    CreateCalculationComponent.prototype.onPlatformChange = function (event) {
        this.platform = this.platformList.getValue(event.newIndex);
        this.fillPortfolioItemsList(this.platform);
        this.fillSymbolsList(this.platform);
    };
    CreateCalculationComponent.prototype.fillPortfolioItemsList = function (platform) {
        var portfolioItems = this.portfolioItemService.getAllPortfolioItems();
        var valueList = new nativescript_drop_down_1.ValueList();
        for (var i = 0; i < portfolioItems.length; i++) {
            if (portfolioItems[i].getPortfolioName() === platform) {
                var newValueItem = { value: portfolioItems[i].getPortfolioItemName(), display: portfolioItems[i].getPortfolioItemDescription() };
                valueList.push(newValueItem);
            }
        }
        this.sourcePortfolioNames = valueList;
    };
    CreateCalculationComponent.prototype.fillSymbolsList = function (platform) {
        var distinctSymbols = this.currencyPriceService.getDistinctCurrencySymbols(platform);
        var newValueList = new nativescript_drop_down_1.ValueList();
        for (var i = 0; i < distinctSymbols.length; i++) {
            var newValueItem = { value: distinctSymbols[i], display: distinctSymbols[i] };
            newValueList.push(newValueItem);
        }
        this.targetCurrencySymbolList = newValueList;
    };
    CreateCalculationComponent.prototype.onSourcePortfolioChange = function (event) {
        this.sourcePortfolioItemName = this.sourcePortfolioNames.getValue(event.newIndex);
    };
    CreateCalculationComponent.prototype.onTargetCurrencyChange = function (event) {
        this.targetCurrencySymbol = this.targetCurrencySymbolList.getValue(event.newIndex);
    };
    CreateCalculationComponent = __decorate([
        core_1.Component({
            selector: "create-calculation",
            moduleId: module.id,
            templateUrl: "./create-calculation.component.html",
        }),
        __metadata("design:paramtypes", [calculation_service_1.CalculationService,
            router_1.Router,
            router_2.RouterExtensions,
            portfolio_item_service_1.PortfolioItemService,
            currency_price_service_1.CurrencyPriceService])
    ], CreateCalculationComponent);
    return CreateCalculationComponent;
}());
exports.CreateCalculationComponent = CreateCalculationComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWNhbGN1bGF0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNyZWF0ZS1jYWxjdWxhdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBa0Q7QUFFbEQsdUVBQXFFO0FBRXJFLDBDQUF5QztBQUN6QyxzREFBK0Q7QUFFL0QsaUVBQW1EO0FBRW5ELDZFQUEwRTtBQUMxRSw2RUFBMEU7QUFPMUU7SUFvQkksb0NBQTZCLGtCQUFzQyxFQUN0QyxNQUFjLEVBQ2QsZUFBaUMsRUFDakMsb0JBQTBDLEVBQzFDLG9CQUEwQztRQUoxQyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBQ3RDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxvQkFBZSxHQUFmLGVBQWUsQ0FBa0I7UUFDakMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQUMxQyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBbkJ2RSxpQkFBWSxHQUFxQixJQUFJLGtDQUFTLENBQVM7WUFDbkQsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUU7WUFDMUMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUU7U0FDN0MsQ0FBQyxDQUFDO1FBQ0gsU0FBSSxHQUFHLElBQUksQ0FBQztRQUdaLDhCQUF5QixHQUFVLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRzFFLGFBQVEsR0FBVyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQVc5RSxDQUFDO0lBRUQsNkNBQVEsR0FBUjtRQUNJLG9FQUFvRTtRQUNwRSxJQUFJLENBQUMsc0JBQXNCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNyQyxDQUFD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QVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdEYsQ0FBQztJQUVELDJEQUFzQixHQUF0QixVQUF1QixLQUFLO1FBQ3hCLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN2RixDQUFDO0lBekZRLDBCQUEwQjtRQUx0QyxnQkFBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLG9CQUFvQjtZQUM5QixRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDbkIsV0FBVyxFQUFFLHFDQUFxQztTQUNyRCxDQUFDO3lDQXFCbUQsd0NBQWtCO1lBQzlCLGVBQU07WUFDRyx5QkFBZ0I7WUFDWCw2Q0FBb0I7WUFDcEIsNkNBQW9CO09BeEI5RCwwQkFBMEIsQ0EwRnRDO0lBQUQsaUNBQUM7Q0FBQSxBQTFGRCxJQTBGQztBQTFGWSxnRUFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmltcG9ydCB7IENhbGN1bGF0aW9uU2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jYWxjdWxhdGlvbi5zZXJ2aWNlXCI7XG5cbmltcG9ydCB7IFJvdXRlciB9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcbmltcG9ydCB7IFJvdXRlckV4dGVuc2lvbnMgfSBmcm9tIFwibmF0aXZlc2NyaXB0LWFuZ3VsYXIvcm91dGVyXCI7XG5cbmltcG9ydCB7IFZhbHVlTGlzdCB9IGZyb20gXCJuYXRpdmVzY3JpcHQtZHJvcC1kb3duXCI7XG5cbmltcG9ydCB7IFBvcnRmb2xpb0l0ZW1TZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2VzL3BvcnRmb2xpby1pdGVtLnNlcnZpY2VcIjtcbmltcG9ydCB7IEN1cnJlbmN5UHJpY2VTZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2N1cnJlbmN5LXByaWNlLnNlcnZpY2VcIjtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwiY3JlYXRlLWNhbGN1bGF0aW9uXCIsXG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcbiAgICB0ZW1wbGF0ZVVybDogXCIuL2NyZWF0ZS1jYWxjdWxhdGlvbi5jb21wb25lbnQuaHRtbFwiLFxufSlcbmV4cG9ydCBjbGFzcyBDcmVhdGVDYWxjdWxhdGlvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgc291cmNlUG9ydGZvbGlvSXRlbU5hbWU6IHN0cmluZztcbiAgICB0YXJnZXRDdXJyZW5jeVN5bWJvbDpzdHJpbmc7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcblxuICAgIHBsYXRmb3JtTGlzdDpWYWx1ZUxpc3Q8c3RyaW5nPiA9IG5ldyBWYWx1ZUxpc3Q8c3RyaW5nPihbXG4gICAgICAgIHsgdmFsdWU6IFwiYml0c3RhbXBcIiwgZGlzcGxheTogXCJCaXRzdGFtcFwiIH0sIFxuICAgICAgICB7IHZhbHVlOiBcImJpdGZpbmV4XCIsIGRpc3BsYXk6IFwiQml0ZmluZXhcIiB9XG4gICAgXSk7XG4gICAgaGludCA9IG51bGw7XG5cbiAgICBzb3VyY2VQb3J0Zm9saW9OYW1lczogVmFsdWVMaXN0PHN0cmluZz47XG4gICAgc2VsZWN0ZWRJbmRleFBsYXRmb3JtTGlzdDpudW1iZXIgPSB0aGlzLnBsYXRmb3JtTGlzdC5nZXRJbmRleChcImJpdHN0YW1wXCIpO1xuICAgIHNlbGVjdGVkSW5kZXhTb3VyY2VQb3J0Zm9saW86bnVtYmVyO1xuXG4gICAgcGxhdGZvcm06IHN0cmluZyA9IHRoaXMucGxhdGZvcm1MaXN0LmdldFZhbHVlKHRoaXMuc2VsZWN0ZWRJbmRleFBsYXRmb3JtTGlzdCk7XG5cbiAgICB0YXJnZXRDdXJyZW5jeVN5bWJvbExpc3Q6IFZhbHVlTGlzdDxzdHJpbmc+O1xuICAgIHNlbGVjdGVkSW5kZXhUYXJnZXRDdXJyZW5jeTogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjYWxjdWxhdGlvblNlcnZpY2U6IENhbGN1bGF0aW9uU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHJvdXRlcjogUm91dGVyLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgcmVhZG9ubHkgcm91dGVyRXh0ZW5zaW9uOiBSb3V0ZXJFeHRlbnNpb25zLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgcmVhZG9ubHkgcG9ydGZvbGlvSXRlbVNlcnZpY2U6IFBvcnRmb2xpb0l0ZW1TZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgcmVhZG9ubHkgY3VycmVuY3lQcmljZVNlcnZpY2U6IEN1cnJlbmN5UHJpY2VTZXJ2aWNlKSB7IFxuICAgICAgICBcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgLy9pbml0aWFsaXplIHNvdXJjZSBwb3J0Zm9saW8gbmFtZXMgd2l0aCBkZWZhdWx0IHBsYXRmb3JtIFwiYml0c3RhbXBcIlxuICAgICAgICB0aGlzLmZpbGxQb3J0Zm9saW9JdGVtc0xpc3QoXCJiaXRzdGFtcFwiKTtcbiAgICAgICAgdGhpcy5maWxsU3ltYm9sc0xpc3QoXCJiaXRzdGFtcFwiKTtcbiAgICB9XG5cblxuICAgIGNyZWF0ZUNhbGN1bGF0aW9uUmVzdWx0KCkge1xuICAgICAgICBpZighdGhpcy5wbGF0Zm9ybSB8fFxuICAgICAgICAgICAgIXRoaXMuZGVzY3JpcHRpb24gfHxcbiAgICAgICAgICAgICF0aGlzLnRhcmdldEN1cnJlbmN5U3ltYm9sIHx8XG4gICAgICAgICAgICAhdGhpcy5zb3VyY2VQb3J0Zm9saW9JdGVtTmFtZSkge1xuICAgICAgICAgICAgYWxlcnQoXCJCaXR0ZSBhbGxlIEZlbGRlciBhdXNmw7xsbGVuXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGlvblNlcnZpY2UuY3JlYXRlQ2FsY3VsYXRpb25SZXN1bHQodGhpcy5zb3VyY2VQb3J0Zm9saW9JdGVtTmFtZS50b0xvd2VyQ2FzZSgpLCB0aGlzLnRhcmdldEN1cnJlbmN5U3ltYm9sLnRvTG93ZXJDYXNlKCksIHRoaXMuZGVzY3JpcHRpb24sIHRoaXMucGxhdGZvcm0udG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRpb25TZXJ2aWNlLnNhdmVDYWxjdWxhdGlvblJlc3VsdHMoKTtcbiAgICAgICAgICAgIHRoaXMucm91dGVyRXh0ZW5zaW9uLmJhY2soKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgb25QbGF0Zm9ybUNoYW5nZShldmVudCkge1xuICAgICAgICB0aGlzLnBsYXRmb3JtID0gdGhpcy5wbGF0Zm9ybUxpc3QuZ2V0VmFsdWUoZXZlbnQubmV3SW5kZXgpO1xuXG4gICAgICAgIHRoaXMuZmlsbFBvcnRmb2xpb0l0ZW1zTGlzdCh0aGlzLnBsYXRmb3JtKTtcbiAgICAgICAgdGhpcy5maWxsU3ltYm9sc0xpc3QodGhpcy5wbGF0Zm9ybSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmaWxsUG9ydGZvbGlvSXRlbXNMaXN0KHBsYXRmb3JtOiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IHBvcnRmb2xpb0l0ZW1zID0gdGhpcy5wb3J0Zm9saW9JdGVtU2VydmljZS5nZXRBbGxQb3J0Zm9saW9JdGVtcygpO1xuICAgICAgICBsZXQgdmFsdWVMaXN0ID0gbmV3IFZhbHVlTGlzdDxzdHJpbmc+KCk7XG5cbiAgICAgICAgZm9yKHZhciBpPTA7IGk8cG9ydGZvbGlvSXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmKHBvcnRmb2xpb0l0ZW1zW2ldLmdldFBvcnRmb2xpb05hbWUoKSA9PT0gcGxhdGZvcm0pIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV3VmFsdWVJdGVtID0geyB2YWx1ZTogcG9ydGZvbGlvSXRlbXNbaV0uZ2V0UG9ydGZvbGlvSXRlbU5hbWUoKSwgZGlzcGxheTogcG9ydGZvbGlvSXRlbXNbaV0uZ2V0UG9ydGZvbGlvSXRlbURlc2NyaXB0aW9uKCkgfTtcbiAgICAgICAgICAgICAgICB2YWx1ZUxpc3QucHVzaChuZXdWYWx1ZUl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zb3VyY2VQb3J0Zm9saW9OYW1lcyA9IHZhbHVlTGlzdDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZpbGxTeW1ib2xzTGlzdChwbGF0Zm9ybTpzdHJpbmcpIHtcbiAgICAgICAgbGV0IGRpc3RpbmN0U3ltYm9scyA9IHRoaXMuY3VycmVuY3lQcmljZVNlcnZpY2UuZ2V0RGlzdGluY3RDdXJyZW5jeVN5bWJvbHMocGxhdGZvcm0pO1xuICAgICAgICBsZXQgbmV3VmFsdWVMaXN0ID0gbmV3IFZhbHVlTGlzdDxzdHJpbmc+KCk7XG5cbiAgICAgICAgZm9yKHZhciBpPTA7IGk8ZGlzdGluY3RTeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbmV3VmFsdWVJdGVtID0ge3ZhbHVlOiBkaXN0aW5jdFN5bWJvbHNbaV0sIGRpc3BsYXk6IGRpc3RpbmN0U3ltYm9sc1tpXX07XG4gICAgICAgICAgICBuZXdWYWx1ZUxpc3QucHVzaChuZXdWYWx1ZUl0ZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50YXJnZXRDdXJyZW5jeVN5bWJvbExpc3QgPSBuZXdWYWx1ZUxpc3Q7XG4gICAgfVxuXG4gICAgb25Tb3VyY2VQb3J0Zm9saW9DaGFuZ2UoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5zb3VyY2VQb3J0Zm9saW9JdGVtTmFtZSA9IHRoaXMuc291cmNlUG9ydGZvbGlvTmFtZXMuZ2V0VmFsdWUoZXZlbnQubmV3SW5kZXgpO1xuICAgIH1cblxuICAgIG9uVGFyZ2V0Q3VycmVuY3lDaGFuZ2UoZXZlbnQpIHtcbiAgICAgICAgdGhpcy50YXJnZXRDdXJyZW5jeVN5bWJvbCA9IHRoaXMudGFyZ2V0Q3VycmVuY3lTeW1ib2xMaXN0LmdldFZhbHVlKGV2ZW50Lm5ld0luZGV4KTtcbiAgICB9XG59Il19