"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var calculation_service_1 = require("../services/calculation.service");
var router_1 = require("@angular/router");
var router_2 = require("nativescript-angular/router");
var nativescript_drop_down_1 = require("nativescript-drop-down");
var portfolio_item_service_1 = require("../services/portfolio-item.service");
var currency_price_service_1 = require("../services/currency-price.service");
var core_2 = require("@ngx-translate/core");
var CreateCalculationComponent = /** @class */ (function () {
    function CreateCalculationComponent(calculationService, router, routerExtension, portfolioItemService, currencyPriceService, translateService) {
        this.calculationService = calculationService;
        this.router = router;
        this.routerExtension = routerExtension;
        this.portfolioItemService = portfolioItemService;
        this.currencyPriceService = currencyPriceService;
        this.translateService = translateService;
        this.platformList = new nativescript_drop_down_1.ValueList([
            { value: "bitstamp", display: "Bitstamp" },
            { value: "bitfinex", display: "Bitfinex" }
        ]);
        this.hint = null;
        this.selectedIndexPlatformList = this.platformList.getIndex("bitstamp");
        this.platform = this.platformList.getValue(this.selectedIndexPlatformList);
    }
    CreateCalculationComponent.prototype.ngOnInit = function () {
        //initialize source portfolio names with default platform "bitstamp"
        this.fillPortfolioItemsList("bitstamp");
        this.fillSymbolsList("bitstamp");
    };
    CreateCalculationComponent.prototype.createCalculationResult = function () {
        if (!this.platform ||
            !this.description ||
            !this.targetCurrencySymbol ||
            !this.sourcePortfolioItemName) {
            this.translateService.get("errorFillInAllFields").subscribe(function (translatedText) {
                alert(translatedText);
            });
        }
        else {
            this.calculationService.createCalculationResult(this.sourcePortfolioItemName.toLowerCase(), this.targetCurrencySymbol.toLowerCase(), this.description, this.platform.toLowerCase());
            this.calculationService.saveCalculationResults();
            this.routerExtension.back();
        }
    };
    CreateCalculationComponent.prototype.onPlatformChange = function (event) {
        this.platform = this.platformList.getValue(event.newIndex);
        this.fillPortfolioItemsList(this.platform);
        this.fillSymbolsList(this.platform);
    };
    CreateCalculationComponent.prototype.fillPortfolioItemsList = function (platform) {
        var portfolioItems = this.portfolioItemService.getAllPortfolioItems();
        var valueList = new nativescript_drop_down_1.ValueList();
        for (var i = 0; i < portfolioItems.length; i++) {
            if (portfolioItems[i].getPortfolioName() === platform) {
                var newValueItem = { value: portfolioItems[i].getPortfolioItemName(), display: portfolioItems[i].getPortfolioItemDescription() };
                valueList.push(newValueItem);
            }
        }
        this.sourcePortfolioNames = valueList;
    };
    CreateCalculationComponent.prototype.fillSymbolsList = function (platform) {
        var distinctSymbols = this.currencyPriceService.getDistinctCurrencySymbols(platform);
        var newValueList = new nativescript_drop_down_1.ValueList();
        for (var i = 0; i < distinctSymbols.length; i++) {
            var newValueItem = { value: distinctSymbols[i], display: distinctSymbols[i] };
            newValueList.push(newValueItem);
        }
        this.targetCurrencySymbolList = newValueList;
    };
    CreateCalculationComponent.prototype.onSourcePortfolioChange = function (event) {
        this.sourcePortfolioItemName = this.sourcePortfolioNames.getValue(event.newIndex);
    };
    CreateCalculationComponent.prototype.onTargetCurrencyChange = function (event) {
        this.targetCurrencySymbol = this.targetCurrencySymbolList.getValue(event.newIndex);
    };
    CreateCalculationComponent = __decorate([
        core_1.Component({
            selector: "create-calculation",
            moduleId: module.id,
            templateUrl: "./create-calculation.component.html",
        }),
        __metadata("design:paramtypes", [calculation_service_1.CalculationService,
            router_1.Router,
            router_2.RouterExtensions,
            portfolio_item_service_1.PortfolioItemService,
            currency_price_service_1.CurrencyPriceService,
            core_2.TranslateService])
    ], CreateCalculationComponent);
    return CreateCalculationComponent;
}());
exports.CreateCalculationComponent = CreateCalculationComponent;
//# sourceMappingURL=data:application/json;base64,