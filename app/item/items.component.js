"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var nativescript_secure_storage_1 = require("nativescript-secure-storage");
var CurrencyPrice_1 = require("./CurrencyPrice");
var item_service_1 = require("./item.service");
var ItemsComponent = (function () {
    function ItemsComponent(itemService) {
        this.itemService = itemService;
        this.currencyPricesBitstamp = [new CurrencyPrice_1.CurrencyPrice("ltc", "eur", "bitstamp"),
            new CurrencyPrice_1.CurrencyPrice("btc", "eur", "bitstamp"),
            new CurrencyPrice_1.CurrencyPrice("xrp", "eur", "bitstamp")];
        this.currencyPricesBitfinex = [new CurrencyPrice_1.CurrencyPrice("iot", "btc", "bitfinex"),
            new CurrencyPrice_1.CurrencyPrice("btc", "eur", "bitfinex"),
            new CurrencyPrice_1.CurrencyPrice("eth", "usd", "bitfinex"),
            new CurrencyPrice_1.CurrencyPrice("iot", "eth", "bitfinex"),
            new CurrencyPrice_1.CurrencyPrice("btc", "usd", "bitfinex"),
            new CurrencyPrice_1.CurrencyPrice("dsh", "usd", "bitfinex"),
            new CurrencyPrice_1.CurrencyPrice("dsh", "btc", "bitfinex")];
        this.secureStorage = new nativescript_secure_storage_1.SecureStorage();
    }
    ItemsComponent.prototype.ngOnInit = function () {
        this.readSecureStorage();
        this.refreshBitfinexData();
        this.refreshBitstampData();
    };
    ItemsComponent.prototype.refreshAll = function (pullToRefresh) {
        var promiseBitfinex = this.refreshBitfinexData();
        var promiseBitstamp = this.refreshBitstampData();
        Promise.all([promiseBitfinex, promiseBitstamp]).then(function () {
            pullToRefresh.refreshing = false;
        });
    };
    ItemsComponent.prototype.refreshBitstampData = function () {
        var _this = this;
        var promises = [];
        for (var i = 0; i < this.currencyPricesBitstamp.length; i++) {
            var promise = this.itemService.loadDataFromBitstampWithSymbol(this.currencyPricesBitstamp[i]);
            promises.push(promise);
        }
        return new Promise(function (resolve, reject) {
            Promise.all(promises).then(function () {
                _this.calculateAll();
                resolve(true);
            });
        });
    };
    ItemsComponent.prototype.refreshBitfinexData = function () {
        var _this = this;
        var promises = [];
        for (var i = 0; i < this.currencyPricesBitfinex.length; i++) {
            var promise = this.itemService.loadDataFromBitfinexWithSymbol(this.currencyPricesBitfinex[i]);
            promises.push(promise);
        }
        return new Promise(function (resolve, reject) {
            Promise.all(promises).then(function () {
                _this.calculateAll();
                resolve(true);
            });
        });
        /*let promiseIota = this.itemService.loadIotaBTCData().then((BTCKurs) => {
            this.IOTABTCKurs = BTCKurs;
        });

        let promiseBTCEuro = this.itemService.loadBTCEuroData().then((BTCEuroKurs) => {
            this.BTCEURKurs = BTCEuroKurs;
        });

        let promiseETHUSD = this.itemService.loadETHUSDData().then((ETHUSDKurs) => {
            this.ETHUSDKurs = ETHUSDKurs;
        });

        let promiseIotaETH = this.itemService.loadIOTAETHData().then((IOTAETHKurs) => {
            this.IOTAETHKurs = IOTAETHKurs;
        });

        let promiseBTCUSD = this.itemService.loadBTCUSDData().then((BTCUSDKurs) => {
            this.BTCUSDKurs = BTCUSDKurs;
        });

        let promiseDashUSD = this.itemService.loadDashUSDData().then((DashUSDKurs) => {
            this.DashUSDKurs = DashUSDKurs;
        });

        let promiseDashBTC = this.itemService.loadDashBTCData().then((DashBTCKurs) => {
            this.DashBTCKurs = DashBTCKurs;
        });*/
    };
    ItemsComponent.prototype.getCourse = function (from, to, platform) {
        if (platform === "bitfinex") {
            for (var i = 0; i < this.currencyPricesBitfinex.length; i++) {
                if (this.currencyPricesBitfinex[i].currencyCodeFrom === from &&
                    this.currencyPricesBitfinex[i].currencyCodeTo === to) {
                    return this.currencyPricesBitfinex[i].price;
                }
            }
        }
        else if (platform === "bitstamp") {
            for (var i = 0; i < this.currencyPricesBitstamp.length; i++) {
                if (this.currencyPricesBitstamp[i].currencyCodeFrom === from &&
                    this.currencyPricesBitstamp[i].currencyCodeTo === to) {
                    return this.currencyPricesBitstamp[i].price;
                }
            }
        }
    };
    ItemsComponent.prototype.calculateAll = function () {
        this.calculateIOTAEuroViaBTC();
        this.calculateDashEuroViaBTC();
        this.calculateDashUSD();
        this.calculateBTCIOTA();
        this.calculateBTCEuro();
        this.calculateBTCUSD();
        this.calculateIOTAUSDViaBTC();
        this.calculateIOTAUSDViaETH();
        this.calculateAllEuroViaBTC();
        this.calculateAllUSDViaBTC();
        this.calculateAllUSDViaEthereum();
        this.calculateAllBitstamp();
    };
    ItemsComponent.prototype.calculateIOTAEuroViaBTC = function () {
        var result = (parseFloat(this.IOTAAmount) * this.getCourse("iot", "btc", "bitfinex")) * this.getCourse("btc", "eur", "bitfinex");
        this.CalcIOTAEuro = result.toString();
    };
    ItemsComponent.prototype.calculateDashEuroViaBTC = function () {
        var result = (parseFloat(this.DashAmount) * this.getCourse("dsh", "btc", "bitfinex")) * this.getCourse("btc", "eur", "bitfinex");
        this.CalcDashEuroViaBTC = result.toString();
    };
    ItemsComponent.prototype.calculateDashUSD = function () {
        var result = parseFloat(this.DashAmount) * this.getCourse("dsh", "usd", "bitfinex");
        this.CalcDashUSD = result.toString();
    };
    ItemsComponent.prototype.calculateBTCEuro = function () {
        var result = parseFloat(this.BTCAmount) * this.getCourse("btc", "eur", "bitfinex");
        this.CalcBTCEuro = result.toString();
    };
    ItemsComponent.prototype.calculateBTCUSD = function () {
        var result = parseFloat(this.BTCAmount) * this.getCourse("btc", "usd", "bitfinex");
        this.CalcBTCUSD = result.toString();
    };
    ItemsComponent.prototype.calculateIOTAUSDViaETH = function () {
        var result = (parseFloat(this.IOTAAmount) * this.getCourse("iot", "eth", "bitfinex")) * this.getCourse("eth", "usd", "bitfinex");
        this.CalcIOTAUSDViaETH = result.toString();
    };
    ItemsComponent.prototype.calculateIOTAUSDViaBTC = function () {
        var result = (parseFloat(this.IOTAAmount) * this.getCourse("iot", "btc", "bitfinex")) * this.getCourse("btc", "usd", "bitfinex");
        this.CalcIOTAUSDViaBTC = result.toString();
    };
    ItemsComponent.prototype.calculateAllEuroViaBTC = function () {
        var result = parseFloat(this.CalcBTCEuro) + parseFloat(this.CalcIOTAEuro) + parseFloat(this.CalcDashEuroViaBTC);
        this.CalcAllEuroViaBTC = result.toString();
    };
    ItemsComponent.prototype.calculateAllUSDViaEthereum = function () {
        var result = parseFloat(this.CalcIOTAUSDViaETH) + parseFloat(this.CalcBTCUSD) + parseFloat(this.CalcDashUSD);
        this.CalcAllUSDViaETH = result.toString();
    };
    ItemsComponent.prototype.calculateAllUSDViaBTC = function () {
        var result = parseFloat(this.CalcIOTAUSDViaBTC) + parseFloat(this.CalcBTCUSD) + parseFloat(this.CalcDashUSD);
        this.CalcAllUSDViaBTC = result.toString();
    };
    ItemsComponent.prototype.calculateBTCIOTA = function () {
        var result = parseFloat(this.BTCAmount) / this.getCourse("iot", "btc", "bitfinex");
        this.CalcBTCIOTA = result.toString();
    };
    ItemsComponent.prototype.calculateAllBitstamp = function () {
        var result = parseFloat(this.BitstampEuroAmount) / this.getCourse("ltc", "eur", "bitstamp");
        this.CalcBitstampLTCAmountEUR = result.toString();
        result = parseFloat(this.BitstampEuroAmount) / this.getCourse("btc", "eur", "bitstamp");
        this.CalcBitstampBTCAmountEuro = result.toString();
        result = parseFloat(this.BitstampEuroAmount) / this.getCourse("xrp", "eur", "bitstamp");
        this.CalcBitstampXRPAmountEuro = result.toString();
        result = parseFloat(this.BitstampLitecoinAmount) * this.getCourse("ltc", "eur", "bitstamp");
        this.CalcBitstampLTCEUR = result.toString();
        result = parseFloat(this.BitstampBitcoinAmount) * this.getCourse("btc", "eur", "bitstamp");
        this.CalcBitstampBTCEUR = result.toString();
        result = parseFloat(this.BitstampRipplesAmount) * this.getCourse("xrp", "eur", "bitstamp");
        this.CalcBitstampXRPEUR = result.toString();
        result = parseFloat(this.CalcBitstampBTCEUR) + parseFloat(this.CalcBitstampLTCEUR) + parseFloat(this.CalcBitstampXRPEUR);
        this.CalcBitstampAllEuro = result.toString();
    };
    ItemsComponent.prototype.onRefreshPressed = function (event) {
        var pullToRefresh = event.object;
        this.refreshAll(pullToRefresh);
    };
    ItemsComponent.prototype.readSecureStorage = function () {
        this.IOTAAmount = this.secureStorage.getSync({
            key: "bfCalcIOTAAmount"
        }) || "309";
        this.BTCAmount = this.secureStorage.getSync({
            key: "bfCalcBTCAmount"
        }) || "0.07297568";
        this.DashAmount = this.secureStorage.getSync({
            key: "bfCalcDashAmount"
        }) || "0.16300331";
        this.BitstampBitcoinAmount = this.secureStorage.getSync({
            key: "bsCalcBTCAmount"
        }) || "0";
        this.BitstampLitecoinAmount = this.secureStorage.getSync({
            key: "bsCalcLTCAmount"
        }) || "0";
        this.BitstampEuroAmount = this.secureStorage.getSync({
            key: "bsCalcEuroAmount"
        }) || "500";
        this.BitstampRipplesAmount = this.secureStorage.getSync({
            key: "bsCalcRipplesAmount"
        }) || "0";
    };
    ItemsComponent.prototype.onBitstampRipplesAmountChange = function (event) {
        this.BitstampRipplesAmount = event;
        this.secureStorage.setSync({
            key: "bsCalcRipplesAmount",
            value: this.BitstampRipplesAmount
        });
    };
    ItemsComponent.prototype.onBitstampEuroAmountChange = function (event) {
        this.BitstampEuroAmount = event;
        this.secureStorage.setSync({
            key: "bsCalcEuroAmount",
            value: this.BitstampEuroAmount
        });
    };
    ItemsComponent.prototype.onBitstampLitecoinAmountChange = function (event) {
        this.BitstampLitecoinAmount = event;
        this.secureStorage.setSync({
            key: "bsCalcLTCAmount",
            value: this.BitstampLitecoinAmount
        });
    };
    ItemsComponent.prototype.onBitstampBitcoinAmountChange = function (event) {
        this.BitstampBitcoinAmount = event;
        this.secureStorage.setSync({
            key: "bsCalcBTCAmount",
            value: this.BitstampBitcoinAmount
        });
    };
    ItemsComponent.prototype.onIOTAAmountChange = function (event) {
        this.IOTAAmount = event;
        this.secureStorage.setSync({
            key: "bfCalcIOTAAmount",
            value: this.IOTAAmount
        });
    };
    ItemsComponent.prototype.onBTCAmountChange = function (event) {
        this.BTCAmount = event;
        this.secureStorage.setSync({
            key: "bfCalcBTCAmount",
            value: this.BTCAmount
        });
    };
    ItemsComponent.prototype.onDashAmountChange = function (event) {
        this.DashAmount = event;
        this.secureStorage.setSync({
            key: "bfCalcDashAmount",
            value: this.DashAmount
        });
    };
    ItemsComponent = __decorate([
        core_1.Component({
            selector: "ns-items",
            moduleId: module.id,
            templateUrl: "./items.component.html",
        }),
        __metadata("design:paramtypes", [item_service_1.ItemService])
    ], ItemsComponent);
    return ItemsComponent;
}());
exports.ItemsComponent = ItemsComponent;
//# sourceMappingURL=data:application/json;base64,